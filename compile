#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

BASE_DIR = os.path.dirname(__file__)
SOURCE_DIR = os.path.join(BASE_DIR, 'compiled')
SOURCE_FILES = [
    os.path.join(path, f)
    for (path, dirs, files) in os.walk(SOURCE_DIR)
    for f in files
    if f.endswith('.cpp')
]
BINDINGS_FILE = os.path.join(SOURCE_DIR, 'bindings.cpp')
BINDINGS_GENERATOR = os.path.join(SOURCE_DIR, 'bindings.cpp.js')
BINDINGS_OUTPUT = os.path.join(SOURCE_DIR, 'bindings.js')
COMPILER_OUTPUT = os.path.join(BASE_DIR, 'lib', 'compiled.js')
GENERATION_PARAMS = {
    'SHELL_FILE': "'{}'".format(os.path.abspath(os.path.join(SOURCE_DIR,
                                                             'shell.js'))),
    'ASM_JS': 2,  # "almost asm"
    'TOTAL_MEMORY': 16*1024*1024,
    'TOTAL_STACK': 1*1024*1024,
    'ALLOW_MEMORY_GROWTH': 1,
    'NO_EXIT_RUNTIME': 1,
    'NO_DYNAMIC_EXECUTION': 1,
    'NO_FILESYSTEM': 1,
    'INVOKE_RUN': 0,
    'TEXTDECODER': 0,
    'EXPORTED_RUNTIME_METHODS': ['cwrap', 'ccall', 'stringToAscii'],
}
DEFINES = []
ADDITIONAL_PARAMS = ['-O3', '-m32', '-std=gnu++14', '--memory-init-file', '0',
                     '--emit-symbol-map']


def getenv(emscripten_config):
    scope = {}
    execfile(emscripten_config, scope, scope)
    env = os.environ.copy()
    env.update({
        'EM_CONFIG': emscripten_config,
        'EMSCRIPTEN': scope['EMSCRIPTEN_ROOT'],
        'PYTHON': scope.get('PYTHON', sys.executable),
        'NODE_JS': scope.get('NODE_JS', 'node'),
    })
    return env


def generate_bindings(env):
    params = [
        env['PYTHON'], os.path.join(env['EMSCRIPTEN'], 'emcc'), BINDINGS_FILE,
        '-o', BINDINGS_GENERATOR, '-std=gnu++14', '-DPRINT_BINDINGS',
        '-s', 'WARN_ON_UNDEFINED_SYMBOLS=0',
    ]
    subprocess.check_call(params, env=env)

    with open(BINDINGS_OUTPUT, 'w') as file:
        subprocess.check_call([env['NODE_JS'], BINDINGS_GENERATOR],
                              stdout=file)


def run_compiler(env, debug=False, tracing=False):
    params = [
        env['PYTHON'], os.path.join(env['EMSCRIPTEN'], 'emcc'),
        '-o', COMPILER_OUTPUT,
        '--post-js', BINDINGS_OUTPUT,
    ]
    params.extend(SOURCE_FILES)
    params.extend('-D' + flag for flag in DEFINES)
    for key, value in GENERATION_PARAMS.iteritems():
        params.extend(['-s', '{}={}'.format(key, str(value))])
    if debug:
        params.append('-g1')
    if tracing:
        params.append('--tracing')
    params.extend(ADDITIONAL_PARAMS)
    subprocess.check_call(params, env=env)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Compile Emscripten-based C++ code to JavaScript'
    )
    parser.add_argument(
        '--emscripten-config',
        metavar='DIR',
        default=os.path.expanduser('~/.emscripten'),
        help='Emscripten installation directory'
    )
    parser.add_argument(
        '-d', '--debug',
        action='store_true',
        help='Disable code minification'
    )
    parser.add_argument(
        '-t', '--tracing',
        action='store_true',
        help='Enable memory tracing'
    )
    args = parser.parse_args()

    env = getenv(args.emscripten_config)
    generate_bindings(env)
    run_compiler(env, debug=args.debug, tracing=args.tracing)
